/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-explicit-any */
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.

import * as React from 'react';

export const Index: Record<string, any> = {
  'form-root-error': {
    name: 'form-root-error',
    description: 'Show errors from root with use-form-hook',
    type: 'registry:ui',
    files: [
      {
        path: 'src/registry/auth/ui/form-root-error.tsx',
        content:
          "import { ComponentProps } from 'react';\nimport { useFormState } from 'react-hook-form';\nimport { cn } from '@/lib/utils';\n\nfunction FormRootError({ className, ...props }: ComponentProps<'p'>) {\n  const { errors } = useFormState();\n  const rootError = errors.root;\n  if (!rootError) return null;\n\n  return (\n    <p className={cn('text-destructive text-sm', className)} {...props}>\n      {rootError.message}\n    </p>\n  );\n}\n\nexport { FormRootError };\n",
        type: 'registry:ui',
      },
    ],
  },
  'password-input': {
    name: 'password-input',
    description: 'Input with visibility toggle',
    type: 'registry:ui',
    files: [
      {
        path: 'src/registry/auth/ui/password-input.tsx',
        content:
          "'use client';\nimport { ComponentProps, useState } from 'react';\nimport { EyeIcon, EyeOffIcon } from 'lucide-react';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\n\nfunction PasswordInput(props: Omit<ComponentProps<typeof Input>, 'type'>) {\n  const [isVisible, setIsVisible] = useState(false);\n  const toggleVisibility = () => setIsVisible(!isVisible);\n\n  return (\n    <div className='relative'>\n      <Input type={isVisible ? 'text' : 'password'} {...props} />\n      <Button\n        variant='ghost'\n        size='icon'\n        className='absolute top-1/2 right-1 size-7 -translate-y-1/2'\n        onClick={toggleVisibility}\n        type='button'\n        aria-label={\`\${isVisible ? 'Hide' : 'Show'} password\`}\n      >\n        {isVisible ? <EyeOffIcon /> : <EyeIcon />}\n      </Button>\n    </div>\n  );\n}\n\nexport { PasswordInput };\n",
        type: 'registry:ui',
      },
    ],
  },
  'login-form': {
    name: 'login-form',
    description: 'Login form with validation and loading/error states',
    type: 'registry:component',
    files: [
      {
        path: 'src/registry/auth/components/login-form/login-form.tsx',
        content:
          "'use client';\nimport { z } from 'zod';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { Loader2 } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { PasswordInput } from '@/components/ui/password-input';\nimport { FormRootError } from '@/components/ui/form-root-error';\n\nimport { LoginProps } from '@/lib/types';\nimport { loginSchema } from '@/lib/schemas';\n\nfunction LoginForm({ onSubmitAction, onSuccess }: LoginProps) {\n  const form = useForm<z.infer<typeof loginSchema>>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: '',\n      password: '',\n    },\n  });\n\n  async function onSubmit(values: z.infer<typeof loginSchema>) {\n    const response = await onSubmitAction(values);\n    if (response === typeof 'string') {\n      form.setError('root', {\n        type: 'manual',\n        message: response,\n      });\n    }\n\n    onSuccess();\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className='space-y-4'>\n        <FormField\n          control={form.control}\n          name='email'\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>E-mail</FormLabel>\n              <FormControl>\n                <Input\n                  {...field}\n                  placeholder='username@domain.com'\n                  autoComplete='email'\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name='password'\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Password</FormLabel>\n              <FormControl>\n                <PasswordInput {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormRootError />\n        <Button\n          type='submit'\n          className='w-full'\n          disabled={form.formState.isSubmitting}\n        >\n          {form.formState.isSubmitting ? (\n            <Loader2 className='animate-spin' />\n          ) : (\n            'Login'\n          )}\n        </Button>\n      </form>\n    </Form>\n  );\n}\n\nexport { LoginForm };\n",
        type: 'registry:component',
      },
      {
        path: 'src/registry/auth/components/login-form/lib/schemas.ts',
        content:
          "import { z } from 'zod';\n\nconst loginSchema = z.object({\n  email: z.email(),\n  password: z.string().min(8).max(32),\n});\n\nexport { loginSchema };\n",
        type: 'registry:lib',
      },
      {
        path: 'src/registry/auth/components/login-form/lib/types.ts',
        content:
          "import { z } from 'zod';\nimport { loginSchema } from './schemas';\n\ntype FormProps<T> = {\n  onSubmitAction: (values: T) => Promise<true | string>;\n  onSuccess: () => void;\n};\n\ntype LoginProps = FormProps<z.infer<typeof loginSchema>>;\n\nexport type { LoginProps };\n",
        type: 'registry:lib',
      },
    ],
  },
  'password-input-demo': {
    name: 'password-input-demo',
    description: '',
    type: 'registry:example',
    files: [
      {
        path: 'src/registry/auth/examples/password-input-demo.tsx',
        content:
          "import { PasswordInput } from '@/components/ui/password-input';\n\nexport default function PasswordInputDemo() {\n  return <PasswordInput />;\n}\n",
        type: 'registry:example',
      },
    ],
    component: React.lazy(
      () => import('@/registry/auth/examples/password-input-demo.tsx'),
    ),
    source:
      "import { PasswordInput } from '@/components/ui/password-input';\n\nexport default function PasswordInputDemo() {\n  return <PasswordInput />;\n}\n",
  },
  'login-form-demo': {
    name: 'login-form-demo',
    description: '',
    type: 'registry:example',
    files: [
      {
        path: 'src/registry/auth/examples/login-form-demo.tsx',
        content:
          "import { toast } from 'sonner';\nimport { LoginForm } from '@/components/auth/login-form';\n\nexport default function LoginFormDemo() {\n  return (\n    <LoginForm\n      onSubmitAction={async () => {\n        return await new Promise(resolve =>\n          setTimeout(() => resolve(true), 3 * 1000),\n        );\n      }}\n      onSuccess={() => {\n        toast.success('Login successfull');\n      }}\n    />\n  );\n}\n",
        type: 'registry:example',
      },
    ],
    component: React.lazy(
      () => import('@/registry/auth/examples/login-form-demo.tsx'),
    ),
    source:
      "import { toast } from 'sonner';\nimport { LoginForm } from '@/components/auth/login-form';\n\nexport default function LoginFormDemo() {\n  return (\n    <LoginForm\n      onSubmitAction={async () => {\n        return await new Promise(resolve =>\n          setTimeout(() => resolve(true), 3 * 1000),\n        );\n      }}\n      onSuccess={() => {\n        toast.success('Login successfull');\n      }}\n    />\n  );\n}\n",
  },
};
