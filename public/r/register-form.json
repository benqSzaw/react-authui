{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "register-form",
  "type": "registry:block",
  "title": "Register Form",
  "author": "benqSzaw <szawracki.pl>",
  "description": "Headless UI component for user registration.",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "form",
    "input",
    "button",
    "/r/form-root-error.json",
    "/r/password-input.json"
  ],
  "files": [
    {
      "path": "src/registry/auth/blocks/register-form/register-form.tsx",
      "content": "'use client';\nimport { z } from 'zod';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { Button } from '@/components/ui/button';\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Loader2 } from 'lucide-react';\nimport { FormRootError } from '@/registry/auth/ui/form-root-error';\nimport { PasswordInput } from '@/registry/auth/ui/password-input';\n\nconst registerSchema = z\n  .object({\n    username: z.string().min(2).max(32),\n    email: z.email(),\n    password: z.string().min(8).max(32),\n    re_password: z.string().min(8).max(32),\n  })\n  .refine(data => data.password === data.re_password, {\n    message: 'Passwords do not match',\n  });\n\ntype Props = {\n  onSubmitAction: (\n    values: z.infer<typeof registerSchema>,\n  ) => Promise<{ success: boolean; message?: string }>;\n  onSuccess: () => void;\n};\n\nfunction RegisterForm({ onSubmitAction, onSuccess }: Props) {\n  const form = useForm<z.infer<typeof registerSchema>>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      username: '',\n      email: '',\n      password: '',\n      re_password: '',\n    },\n  });\n\n  async function onSubmit(values: z.infer<typeof registerSchema>) {\n    const { success, message } = await onSubmitAction(values);\n    if (success) {\n      onSuccess();\n    } else {\n      form.setError('root', {\n        type: 'manual',\n        message: message || 'An error occurred during login',\n      });\n    }\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <FormField\n          control={form.control}\n          name=\"username\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Username</FormLabel>\n              <FormControl>\n                <Input placeholder=\"admin\" autoComplete=\"username\" {...field} />\n              </FormControl>\n              <FormDescription>\n                This is your public display name.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"email\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>E-mail</FormLabel>\n              <FormControl>\n                <Input\n                  {...field}\n                  placeholder=\"username@domain.com\"\n                  autoComplete=\"email\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"password\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Password</FormLabel>\n              <FormControl>\n                <PasswordInput {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"re_password\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Confirm password</FormLabel>\n              <FormControl>\n                <PasswordInput {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormRootError />\n        <Button\n          type=\"submit\"\n          className=\"w-full\"\n          disabled={form.formState.isSubmitting}\n        >\n          {form.formState.isSubmitting ? (\n            <Loader2 className=\"animate-spin\" />\n          ) : (\n            'Register'\n          )}\n        </Button>\n      </form>\n    </Form>\n  );\n}\n\nexport { RegisterForm };\n",
      "type": "registry:component",
      "target": "components/auth/register-form.tsx"
    }
  ]
}