{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "login-form",
  "type": "registry:component",
  "title": "Login Form",
  "description": "Login form with validation and loading/error states",
  "registryDependencies": [
    "form",
    "https://react-authui.vercel.app/r/form-root-error.json",
    "https://react-authui.vercel.app/r/password-input.json",
    "https://react-authui.vercel.app/r/submit-button.json"
  ],
  "files": [
    {
      "path": "src/registry/auth/components/login-form/login-form.tsx",
      "content": "'use client';\nimport { z } from 'zod';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { SubmitButton } from '@/components/ui/submit-button';\nimport { Input } from '@/components/ui/input';\nimport { PasswordInput } from '@/components/ui/password-input';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { FormRootError } from '@/components/ui/form-root-error';\n\nconst loginSchema = z.object({\n  email: z.email(),\n  password: z.string().min(8).max(32),\n});\n\ntype Props = {\n  onSubmitAction: (\n    values: z.infer<typeof loginSchema>,\n  ) => Promise<true | string>;\n  onSuccess: () => void;\n};\n\nfunction LoginForm({ onSubmitAction, onSuccess }: Props) {\n  const form = useForm<z.infer<typeof loginSchema>>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: '',\n      password: '',\n    },\n  });\n\n  async function onSubmit(values: z.infer<typeof loginSchema>) {\n    const response = await onSubmitAction(values);\n    if (response === typeof 'string') {\n      form.setError('root', {\n        type: 'manual',\n        message: response,\n      });\n    }\n\n    onSuccess();\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <FormField\n          control={form.control}\n          name=\"email\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>E-mail</FormLabel>\n              <FormControl>\n                <Input\n                  {...field}\n                  placeholder=\"username@domain.com\"\n                  autoComplete=\"email\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"password\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Password</FormLabel>\n              <FormControl>\n                <PasswordInput {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormRootError />\n        <SubmitButton loading={form.formState.isSubmitting}>Login</SubmitButton>\n      </form>\n    </Form>\n  );\n}\n\nexport { LoginForm };\n",
      "type": "registry:component",
      "target": "components/auth/login-form.tsx"
    }
  ]
}
