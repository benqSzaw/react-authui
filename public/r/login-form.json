{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "login-form",
  "type": "registry:component",
  "title": "Login Form",
  "description": "Login form with validation and loading/error states",
  "registryDependencies": [
    "form",
    "https://react-authui.vercel.app/r/form-root-error.json",
    "https://react-authui.vercel.app/r/password-input.json"
  ],
  "files": [
    {
      "path": "src/registry/auth/components/login-form/login-form.tsx",
      "content": "'use client';\r\nimport { z } from 'zod';\r\nimport { useForm } from 'react-hook-form';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport { Loader2 } from 'lucide-react';\r\nimport { Button } from '@/components/ui/button';\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from '@/components/ui/form';\r\nimport { Input } from '@/components/ui/input';\r\nimport { PasswordInput } from '@/components/ui/password-input';\r\nimport { FormRootError } from '@/components/ui/form-root-error';\r\n\r\nimport { LoginProps } from '@/lib/types';\r\nimport { loginSchema } from '@/lib/schemas';\r\n\r\nfunction LoginForm({ onSubmitAction, onSuccess }: LoginProps) {\r\n  const form = useForm<z.infer<typeof loginSchema>>({\r\n    resolver: zodResolver(loginSchema),\r\n    defaultValues: {\r\n      email: '',\r\n      password: '',\r\n    },\r\n  });\r\n\r\n  async function onSubmit(values: z.infer<typeof loginSchema>) {\r\n    const response = await onSubmitAction(values);\r\n    if (response === typeof 'string') {\r\n      form.setError('root', {\r\n        type: 'manual',\r\n        message: response,\r\n      });\r\n    }\r\n\r\n    onSuccess();\r\n  }\r\n\r\n  return (\r\n    <Form {...form}>\r\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\r\n        <FormField\r\n          control={form.control}\r\n          name=\"email\"\r\n          render={({ field }) => (\r\n            <FormItem>\r\n              <FormLabel>E-mail</FormLabel>\r\n              <FormControl>\r\n                <Input\r\n                  {...field}\r\n                  placeholder=\"username@domain.com\"\r\n                  autoComplete=\"email\"\r\n                />\r\n              </FormControl>\r\n              <FormMessage />\r\n            </FormItem>\r\n          )}\r\n        />\r\n        <FormField\r\n          control={form.control}\r\n          name=\"password\"\r\n          render={({ field }) => (\r\n            <FormItem>\r\n              <FormLabel>Password</FormLabel>\r\n              <FormControl>\r\n                <PasswordInput {...field} />\r\n              </FormControl>\r\n              <FormMessage />\r\n            </FormItem>\r\n          )}\r\n        />\r\n        <FormRootError />\r\n        <Button\r\n          type=\"submit\"\r\n          className=\"w-full\"\r\n          disabled={form.formState.isSubmitting}\r\n        >\r\n          {form.formState.isSubmitting ? (\r\n            <Loader2 className=\"animate-spin\" />\r\n          ) : (\r\n            'Login'\r\n          )}\r\n        </Button>\r\n      </form>\r\n    </Form>\r\n  );\r\n}\r\n\r\nexport { LoginForm };\r\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/auth/components/login-form/lib/schemas.ts",
      "content": "import { z } from 'zod';\r\n\r\nconst loginSchema = z.object({\r\n  email: z.email(),\r\n  password: z.string().min(8).max(32),\r\n});\r\n\r\nexport { loginSchema };\r\n",
      "type": "registry:lib"
    },
    {
      "path": "src/registry/auth/components/login-form/lib/types.ts",
      "content": "import { z } from 'zod';\r\nimport { loginSchema } from './schemas';\r\n\r\ntype FormProps<T> = {\r\n  onSubmitAction: (values: T) => Promise<true | string>;\r\n  onSuccess: () => void;\r\n};\r\n\r\ntype LoginProps = FormProps<z.infer<typeof loginSchema>>;\r\n\r\nexport type { LoginProps };\r\n",
      "type": "registry:lib"
    }
  ]
}
